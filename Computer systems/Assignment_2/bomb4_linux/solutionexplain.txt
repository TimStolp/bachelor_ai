He is evil and fits easily into most overhead storage bins.
print out various things until I found 0x402260 which contained the sentence.


1 2 4 8 16 32
it checks if first number is equal to 1, afterwards it adds itself to itself and compares again and loops this until 6 numbers are checked.

2 518
First figure out what I need to input by x/s 0x40246f, then I found that the first int needs to be bigger than 1 and lower than 7, I took 2, then it did a couple of artheritmic adds and subs which added up to 0x206 which was then compared to my 2nd int if they are equal, so the 2nd int was 518 in decimal

4 19 DrEvil
first it checks if there are 2 numbers as input then if the first number is lower than 15, then in func 4 it compares the first number first to 7 then if 7 is higher it pushes 7 to the stack and compares the first number to 3 then because 3 is lower it pushes 3 onto the stack and compares the first number to 5, then because 5 is higher it pushes 5 onto the stack and compares the first number to 4, then it is equal so it returns the value which is the first number + the numbers it pushed onto the stack, here 4+5+3+7=19 then it checks if returned number is equal to 19 and if second input number is same as 19. (add DrEvil to access secret phase, stepping through sscanf showed that it was looking for "%d %d %s" during the call in the last phase_defused)

bbbbbi
string length needs to be 6, goes in recursion and adds a certain number per iteration depending on which letters you input, input a bunch of letters and write down their respective number, total number needs to be 37, b=6,i=7, 5x6 + 1xi = 37

6 4 3 5 1 2
first it checks if 6 numbers are put in, then it checks if all ints are below 6, then if all ints are all different from eachother, then it compares numbers from $rbx to eachother. the numbers compared can be found by printing $rbx by x/w which shows that each number belongs to a certain node, nodes 1 to 6, the values are the values connected to that node, and so to that number of the node. Sort the values from the nodes from big to small and put numbers 1 to 6 in that order.

35
to reach fun7 your 7th input in the solution.txt file must be: input-1 =< 1000, the result of fun7 is compared to 6, if equal phase gets defused. fun7 has standard numbers that it compares to the input, if the number is greater than or equal the input it does the return value *2+1, else it does *2, if equal it returns 0. this creates a tree structure and depending on which way you go in the tree, you do either *2+1 or *2, to get 6 you need to do 0*2+1=1, 1*2+1=3, 3*2, so starting backwards, less than -> greater than -> greater than -> equal gets you the right calculations. following these steps you end up with 35.
